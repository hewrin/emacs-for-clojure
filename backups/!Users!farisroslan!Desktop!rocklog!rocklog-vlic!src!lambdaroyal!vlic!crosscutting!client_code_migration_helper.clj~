(ns lambdaroyal.vlic.crosscutting.test-get-required-migrations
  (:require 
   [lambdaroyal.memory.core.tx :as tx]
   [lambdaroyal.vlic.crosscutting.tx-decorator :as tx']
   [lambdaroyal.memory.helper :refer :all]
   [lambdaroyal.memory.abstraction.search :refer :all]
   [lambdaroyal.vlic.ioc :refer :all]
   [lambdaroyal.vlic.crosscutting.datastructures :refer :all]
   [midje.sweet :refer :all]
   [clj-time.core :as t]
   [clj-time.format :as f]
   [lambdaroyal.vlic.system :as s]
   [lambdaroyal.vlic.crosscutting.cardmeta :as cm]
   [lambdaroyal.vlic.domain.search :refer :all]
   [lambdaroyal.vlic.domain.inbound :as inbound]
   [lambdaroyal.vlic.domain.xfer :as xfer]
   [lambdaroyal.vlic.domain.test-search :refer :all]
   [clojure.string :refer :all]
   [lambdaroyal.vlic.main :as main]
   [lambdaroyal.vlic.crosscutting.autobahn :as autobahn]
   [lambdaroyal.vlic.crosscutting.job-dispatch :refer [dispatch]]
   [cheshire.core :as json])
  (:gen-class))


(defn get-attributes [system datatype]
  (with-tx system
    (let [metadata-attributes (last (cm/cardmeta-cached nil datatype))
          relevant-attributes  (map (fn [x] (first x)) (filter #(and (not= (-> % last :sourcetype) nil)  (not= (-> % last :sourcetype) "json") (not= (-> % last :sourcetype) "clojure")) metadata-attributes))
          relevant-records (for [attr relevant-attributes
                                 record (tx/select *tx*  :snapin)
                                 :when (not= (-> record last attr) nil)]
                             {:datatype datatype, :attribute attr, :record record :source (-> record last attr)})]
      relevant-records)))

(defn get-nested-attributes [system datatype attribute subattribute]
  (with-tx system
    (let [records (filter #(and (not= (-> % last attribute) nil) (not-empty (filter (fn [gOpt] (some? (-> gOpt subattribute))) (-> % last attribute)))) (tx/select *tx* datatype))
          records (map (fn [record] (map (fn [code] {:datatype datatype :attribute attribute :subattribute subattribute :record record :source (-> code subattribute)} )(filter (fn [gOpt] (some? (-> gOpt subattribute))) (-> record last attribute)))) records)]
      records)))


(defn get-records-that-need-updating [records]
  (filter #(re-find #"get|all|checkOrRaise|checkForMissingColls" (-> % :source)) records))

(defn test-get-records [records]
  (map :source records))


(comment

  (defn get-snapin-nested-attributes [datatype attribute subattribute]
    (let [system lambdaroyal.vlic.main/system
          records (filter #(and (not= (-> % last attribute) nil) (not-empty (filter (fn [gOpt] (some? (-> gOpt subattribute))) (-> % last attribute)))) (select tx datatype))
          records (map (fn [record] (map (fn [code] {:datatype datatype :attribute attribute :subattribute subattribute :record record :source (-> code subattribute)} )(filter (fn [gOpt] (some? (-> gOpt subattribute))) (-> record last attribute)))) records)]
      (into [] records))))















