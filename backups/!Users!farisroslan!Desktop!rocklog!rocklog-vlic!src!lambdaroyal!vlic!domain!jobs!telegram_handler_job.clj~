(ns ^{:doc "Create a and register a channel and assign it to an atom. Makes external call to printing server and wait for response of the call. There will be two possible results, 1) Response from printing server 2) Request Timeout."}
    lambdaroyal.vlic.domain.jobs.telegram-handler-job
  (:require
   [lambdaroyal.memory.core.tx :as tx]
   [lambdaroyal.vlic.crosscutting.cardmeta :refer [coerce-attr get-ui-trimmed]]
   [lambdaroyal.vlic.crosscutting.tx-decorator :as tx']
   [lambdaroyal.vlic.domain.order :refer [set-state-and-conquer]]
   [lambdaroyal.vlic.domain.picking-strategy :as picking-strategy]
   [lambdaroyal.memory.helper :refer :all]
   [lambdaroyal.vlic.ioc :refer :all]
   [clojure.tools.logging :as log]
   [clojure.core.async :as async]
   [lambdaroyal.vlic.crosscutting.autobahn :as autobahn]
   [cheshire.core :as json]
   [lambdaroyal.vlic.crosscutting.datastructures :refer :all])
  (:gen-class))

;; --------------------------------------------------------------------
;; IMPLEMENTED CONTRACT 
;; --------------------------------------------------------------------
;; 

(def verbose (atom true))

(defn- inner [system session-id {:keys [server telegram-data event fn  ]}]
  (autobahn/send-to-one {:sessionId session-id :base64-telegram-data telegram-data :event event :fn fn}))

(defn- perform'
  "during configuration (in the higher order function) the order is expected to exist, and during execution time (the function
  returned by the higher order function, the order is expected to exist in state = created"
  [system job ch & params]
  {:pre [(-> job :key1 number?)]}
  (let [io-internal-proxy (:io-internal-proxy job)
        id (first io-internal-proxy)
        session-id (-> io-internal-proxy last :sessionId)]
    (loop [i 0]
      (if-let [io-internal-proxy' (with-tx system (tx/select-first :io-internal-proxy (first io-internal-proxy)))]
        (let [session-id (io-internal-proxy' :session-id)]
          (let [channels (or (get @autobahn/channels-by-id session-id) [])]
            (if-let [channel (first channels)]
              [{:queue (or (:queue job) "telegram-handler") :description (or (:description job) "Makes a call to the printing server") :key1 (:key1 job) :key2 (:key2 job) :key3 (:key3 job)} (partial inner system session-id job)]
              (do
                (if @verbose (println "[Telegram Handler Job] Waiting for connection round " i))
                (Thread/sleep 5000)
                (recur (inc i))))))))))

;; --------------------------------------------------------------------
;; END OF - IMPLEMENTED CONTRACT 
;; --------------------------------------------------------------------












